-- MySQL Script generated by MySQL Workbench
-- Mon Oct  9 22:40:02 2017
-- Model: New Model    Version: 1.0
SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema GeekText
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `GeekText` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `GeekText` ;

-- -----------------------------------------------------
-- Table `GeekText`.`Genre`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`Genre` (
  `GenreId` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`GenreId`),
  UNIQUE INDEX `GenreId_UNIQUE` (`GenreId` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`Publisher`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`Publisher` (
  `PublisherId` INT NOT NULL AUTO_INCREMENT,
  `Name` VARCHAR(45) NOT NULL,
  PRIMARY KEY (`PublisherId`),
  UNIQUE INDEX `PublisherId_UNIQUE` (`PublisherId` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`Author`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`Author` (
  `AuthorId` INT NOT NULL AUTO_INCREMENT,
  `LastName` VARCHAR(45) NOT NULL,
  `FirstName` VARCHAR(45) NOT NULL,
  `Biography` TEXT NULL,
  PRIMARY KEY (`AuthorId`),
  UNIQUE INDEX `AuthorId_UNIQUE` (`AuthorId` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`Book`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`Book` (
  `BookId` INT NOT NULL AUTO_INCREMENT,
  `AuthorId` INT NOT NULL,
  `Title` VARCHAR(45) NOT NULL,
  `Price` FLOAT NOT NULL,
  `Paperback` TINYINT NOT NULL,
  `GenreId` INT NOT NULL,
  `PublisherId` INT NOT NULL,
  `ReleaseDate` DATE NOT NULL,
  `Description` TEXT NULL,
  PRIMARY KEY (`BookId`),
  UNIQUE INDEX `BookId_UNIQUE` (`BookId` ASC),
  INDEX `fk_Book_Genre_idx` (`GenreId` ASC),
  INDEX `fk_Book_Publisher1_idx` (`PublisherId` ASC),
  INDEX `fk_Book_Author1_idx` (`AuthorId` ASC),
  CONSTRAINT `fk_Book_Genre`
    FOREIGN KEY (`GenreId`)
    REFERENCES `GeekText`.`Genre` (`GenreId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Book_Publisher1`
    FOREIGN KEY (`PublisherId`)
    REFERENCES `GeekText`.`Publisher` (`PublisherId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Book_Author1`
    FOREIGN KEY (`AuthorId`)
    REFERENCES `GeekText`.`Author` (`AuthorId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`users`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`users` (
  `username` VARCHAR(50) NOT NULL,
  `password` VARCHAR(50) NOT NULL,
  `enabled` TINYINT NOT NULL DEFAULT 1,
  PRIMARY KEY (`username`),
  UNIQUE INDEX `UserId_UNIQUE` (`username` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`Address`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`Address` (
  `AddressId` INT NOT NULL AUTO_INCREMENT,
  `Address1` VARCHAR(45) NOT NULL,
  `Address2` VARCHAR(45) NULL,
  `City` VARCHAR(45) NOT NULL,
  `State` VARCHAR(2) NOT NULL,
  `Country` VARCHAR(45) NOT NULL,
  `ZipCode` INT NOT NULL,
  PRIMARY KEY (`AddressId`),
  UNIQUE INDEX `AddressId_UNIQUE` (`AddressId` ASC))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`Userdetails`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`Userdetails` (
  `username` VARCHAR(50) NOT NULL,
  `LastName` VARCHAR(45) NOT NULL,
  `FirstName` VARCHAR(45) NOT NULL,
  `Email` VARCHAR(45) NOT NULL,
  `Nickname` VARCHAR(45) NULL,
  `Anonymous` TINYINT NULL DEFAULT 0,
  `HomeAddressId` INT NULL,
  INDEX `fk_Userdetails_users1_idx` (`username` ASC),
  PRIMARY KEY (`username`),
  UNIQUE INDEX `username_UNIQUE` (`username` ASC),
  INDEX `fk_Userdetails_Address1_idx` (`HomeAddressId` ASC),
  CONSTRAINT `fk_Userdetails_users1`
    FOREIGN KEY (`username`)
    REFERENCES `GeekText`.`users` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Userdetails_Address1`
    FOREIGN KEY (`HomeAddressId`)
    REFERENCES `GeekText`.`Address` (`AddressId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`SalesOrder`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`SalesOrder` (
  `OrderId` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL,
  `OrderTotal` FLOAT NOT NULL DEFAULT 0,
  PRIMARY KEY (`OrderId`),
  UNIQUE INDEX `OrderId_UNIQUE` (`OrderId` ASC),
  INDEX `fk_SalesOrder_Userdetails1_idx` (`username` ASC),
  CONSTRAINT `fk_SalesOrder_Userdetails1`
    FOREIGN KEY (`username`)
    REFERENCES `GeekText`.`Userdetails` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`OrderItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`OrderItem` (
  `OrderItemId` INT NOT NULL AUTO_INCREMENT,
  `OrderId` INT NOT NULL,
  `BookId` INT NOT NULL,
  `Qty` INT NOT NULL DEFAULT 1,
  PRIMARY KEY (`OrderItemId`),
  UNIQUE INDEX `OrderItemId_UNIQUE` (`OrderItemId` ASC),
  INDEX `fk_OrderItem_Order1_idx` (`OrderId` ASC),
  INDEX `fk_OrderItem_Book1_idx` (`BookId` ASC),
  CONSTRAINT `fk_OrderItem_Order1`
    FOREIGN KEY (`OrderId`)
    REFERENCES `GeekText`.`SalesOrder` (`OrderId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_OrderItem_Book1`
    FOREIGN KEY (`BookId`)
    REFERENCES `GeekText`.`Book` (`BookId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`BookRating`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`BookRating` (
  `BookRatingId` INT NOT NULL AUTO_INCREMENT,
  `OrderItemId` INT NOT NULL,
  `Rating` INT NOT NULL,
  `Comment` TEXT NULL,
  PRIMARY KEY (`BookRatingId`),
  UNIQUE INDEX `BookRatingId_UNIQUE` (`BookRatingId` ASC),
  INDEX `fk_BookRating_OrderItem1_idx` (`OrderItemId` ASC),
  CONSTRAINT `fk_BookRating_OrderItem1`
    FOREIGN KEY (`OrderItemId`)
    REFERENCES `GeekText`.`OrderItem` (`OrderItemId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`ShoppingCart`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`ShoppingCart` (
  `ShoppingCartId` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL,
  `Subtotal` FLOAT NOT NULL DEFAULT 0,
  PRIMARY KEY (`ShoppingCartId`),
  UNIQUE INDEX `idShoppingCart_UNIQUE` (`ShoppingCartId` ASC),
  INDEX `fk_ShoppingCart_Userdetails1_idx` (`username` ASC),
  CONSTRAINT `fk_ShoppingCart_Userdetails1`
    FOREIGN KEY (`username`)
    REFERENCES `GeekText`.`Userdetails` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`CartItem`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`CartItem` (
  `CartItemId` INT NOT NULL AUTO_INCREMENT,
  `ShoppingCartId` INT NOT NULL,
  `BookId` INT NOT NULL,
  `Quantity` INT NOT NULL DEFAULT 1,
  `SavedForLater` TINYINT NULL DEFAULT 0,
  PRIMARY KEY (`CartItemId`),
  UNIQUE INDEX `CartItemId_UNIQUE` (`CartItemId` ASC),
  INDEX `fk_CartItem_ShoppingCart1_idx` (`ShoppingCartId` ASC),
  INDEX `fk_CartItem_Book1_idx` (`BookId` ASC),
  CONSTRAINT `fk_CartItem_ShoppingCart1`
    FOREIGN KEY (`ShoppingCartId`)
    REFERENCES `GeekText`.`ShoppingCart` (`ShoppingCartId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CartItem_Book1`
    FOREIGN KEY (`BookId`)
    REFERENCES `GeekText`.`Book` (`BookId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`PaymentMethod`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`PaymentMethod` (
  `PaymentMethodId` INT NOT NULL AUTO_INCREMENT,
  `username` VARCHAR(50) NOT NULL,
  `CardNumber` INT NOT NULL,
  `Cvv` INT NOT NULL,
  `CardholderName` VARCHAR(100) NOT NULL,
  `ExpirationMonth` INT NOT NULL,
  `ExpirationYear` VARCHAR(15) NOT NULL,
  `BillingAddressId` INT NOT NULL,
  PRIMARY KEY (`PaymentMethodId`),
  UNIQUE INDEX `idPaymentMethod_UNIQUE` (`PaymentMethodId` ASC),
  INDEX `fk_PaymentMethod_Address1_idx` (`BillingAddressId` ASC),
  INDEX `fk_PaymentMethod_Userdetails1_idx` (`username` ASC),
  CONSTRAINT `fk_PaymentMethod_Address1`
    FOREIGN KEY (`BillingAddressId`)
    REFERENCES `GeekText`.`Address` (`AddressId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_PaymentMethod_Userdetails1`
    FOREIGN KEY (`username`)
    REFERENCES `GeekText`.`Userdetails` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`ShippingAddress`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`ShippingAddress` (
  `username` VARCHAR(50) NOT NULL,
  `AddressId` INT NOT NULL,
  PRIMARY KEY (`AddressId`, `username`),
  INDEX `fk_Person_has_Address_Address1_idx` (`AddressId` ASC),
  INDEX `fk_ShippingAddress_Userdetails1_idx` (`username` ASC),
  CONSTRAINT `fk_Person_has_Address_Address1`
    FOREIGN KEY (`AddressId`)
    REFERENCES `GeekText`.`Address` (`AddressId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_ShippingAddress_Userdetails1`
    FOREIGN KEY (`username`)
    REFERENCES `GeekText`.`Userdetails` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `GeekText`.`authorities`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `GeekText`.`authorities` (
  `authority` VARCHAR(50) NOT NULL,
  `username` VARCHAR(50) NOT NULL,
  INDEX `fk_authorities_Users1_idx` (`username` ASC),
  UNIQUE INDEX `ix_auth_username` (`authority` ASC, `username` ASC),
  CONSTRAINT `fk_authorities_Users1`
    FOREIGN KEY (`username`)
    REFERENCES `GeekText`.`users` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
USE `GeekText`;

DELIMITER $$
USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`Userdetails_AFTER_INSERT` AFTER INSERT ON `Userdetails` FOR EACH ROW
BEGIN
	insert into ShoppingCart (username, Subtotal)
    values (NEW.username, 0);
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`OrderItem_AFTER_INSERT` AFTER INSERT ON `OrderItem` FOR EACH ROW
BEGIN
				update SalesOrder so
                set OrderTotal = ifnull((select sum(b.Price * oi.Quantity)
										from OrderItem oi
										join Book b on b.BookId = oi.BookId
										where oi.OrderId = so.OrderId
										),0)
				where so.OrderId = new.OrderId;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`OrderItem_AFTER_UPDATE` AFTER UPDATE ON `OrderItem` FOR EACH ROW
BEGIN
				update SalesOrder so
                set OrderTotal = ifnull((select sum(b.Price * oi.Quantity)
										from OrderItem oi
										join Book b on b.BookId = oi.BookId
										where oi.OrderId = so.OrderId
										),0)
				where so.OrderId = new.OrderId;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`OrderItem_AFTER_DELETE` AFTER DELETE ON `OrderItem` FOR EACH ROW
BEGIN
				update SalesOrder so
                set OrderTotal = ifnull((select sum(b.Price * oi.Quantity)
										from OrderItem oi
										join Book b on b.BookId = oi.BookId
										where oi.OrderId = so.OrderId
										),0)
				where so.OrderId = old.OrderId;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`CartItem_AFTER_INSERT` AFTER INSERT ON `CartItem` FOR EACH ROW
BEGIN
	update shoppingcart sc
                set subtotal = ifnull((select sum(b.Price * ci.Quantity)
										from CartItem ci
										join Book b on b.BookId = ci.BookId
										where ifnull(ci.SavedForLater, 0) = 0
										and ci.ShoppingCartId = sc.shoppingcartid
										),0)
				where sc.shoppingcartid = new.shoppingcartid;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`CartItem_AFTER_UPDATE` AFTER UPDATE ON `CartItem` FOR EACH ROW
BEGIN
	update shoppingcart sc
                set subtotal = ifnull((select sum(b.Price * ci.Quantity)
										from CartItem ci
										join Book b on b.BookId = ci.BookId
										where ifnull(ci.SavedForLater, 0) = 0
										and ci.ShoppingCartId = sc.shoppingcartid
										),0)
				where sc.shoppingcartid = new.shoppingcartid;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`CartItem_AFTER_DELETE` AFTER DELETE ON `CartItem` FOR EACH ROW
BEGIN
    update shoppingcart sc
                set subtotal = ifnull((select sum(b.Price * ci.Quantity)
										from CartItem ci
										join Book b on b.BookId = ci.BookId
										where ifnull(ci.SavedForLater, 0) = 0
										and ci.ShoppingCartId = sc.shoppingcartid
										), 0)
				where sc.shoppingcartid = old.shoppingcartid;
END$$


DELIMITER ;


ALTER TABLE Book
ADD AvgRating DECIMAL(2,1) DEFAULT 0;

ALTER TABLE Book
ADD Sold INT DEFAULT 0;

DROP TRIGGER OrderItem_AFTER_INSERT;
DROP TRIGGER OrderItem_AFTER_UPDATE;
DROP TRIGGER OrderItem_AFTER_DELETE;

drop table bookrating;

CREATE TABLE IF NOT EXISTS `GeekText`.`BookRating` (
  `BookRatingId` INT NOT NULL AUTO_INCREMENT,
  `BookId` INT NOT NULL,
  `username` VARCHAR(50) NOT NULL,
  `Rating` INT NOT NULL,
  `Comment` TEXT NULL,
  PRIMARY KEY (`BookRatingId`),
  UNIQUE INDEX `BookRatingId_UNIQUE` (`BookRatingId` ASC),
  CONSTRAINT `fk_User_has_Rating`
    FOREIGN KEY (`username`)
    REFERENCES `GeekText`.`users` (`username`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Book_has_Rating`
    FOREIGN KEY (`BookId`)
    REFERENCES `GeekText`.`Book` (`BookId`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


DELIMITER $$
USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`OrderItem_AFTER_INSERT` AFTER INSERT ON `OrderItem` FOR EACH ROW
BEGIN
				update SalesOrder so
                set OrderTotal = ifnull((select sum(b.Price * oi.Qty)
										from OrderItem oi
										join Book b on b.BookId = oi.BookId
										where oi.OrderId = so.OrderId
										),0)
				where so.OrderId = new.OrderId;
END$$

CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`OrderItem_AFTER_UPDATE` AFTER UPDATE ON `OrderItem` FOR EACH ROW
BEGIN
				update SalesOrder so
                set OrderTotal = ifnull((select sum(b.Price * oi.Qty)
										from OrderItem oi
										join Book b on b.BookId = oi.BookId
										where oi.OrderId = so.OrderId
										),0)
				where so.OrderId = new.OrderId;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`OrderItem_AFTER_DELETE` AFTER DELETE ON `OrderItem` FOR EACH ROW
BEGIN
				update SalesOrder so
                set OrderTotal = ifnull((select sum(b.Price * oi.Qty)
										from OrderItem oi
										join Book b on b.BookId = oi.BookId
										where oi.OrderId = so.OrderId
										),0)
				where so.OrderId = old.OrderId;
END$$


DELIMITER $$
USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`UpdateSold_AFTER_INSERT` AFTER INSERT ON `OrderItem` FOR EACH ROW
BEGIN
				update book
				set sold = ifnull((
				select sum(qty) from orderitem oi
				join (select * from book) b on b.bookid = oi.bookid
				where oi.bookid = new.bookid
				group by oi.bookid),0)
				where bookid = new.bookid;

END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`UpdateSold_AFTER_UPDATE` AFTER UPDATE ON `OrderItem` FOR EACH ROW
BEGIN
				update book
				set sold = ifnull((
				select sum(qty) from orderitem oi
				join (select * from book) b on b.bookid = oi.bookid
				where oi.bookid = new.bookid
				group by oi.bookid),0)
				where bookid = new.bookid;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`UpdateSold_AFTER_DELETE` AFTER DELETE ON `OrderItem` FOR EACH ROW
BEGIN
				update book
				set sold = ifnull((
				select sum(qty) from orderitem oi
				join (select * from book) b on b.bookid = oi.bookid
				where oi.bookid = old.bookid
				group by oi.bookid),0)
				where bookid = old.bookid;
END$$



DELIMITER $$
USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`UpdateAvg_AFTER_INSERT` AFTER INSERT ON `BookRating` FOR EACH ROW
BEGIN
				update book
				set avgrating = ifnull((
				select avg(rating) from
				bookrating br
				where br.bookid = new.bookid
				group by br.bookid),0)
				where bookid = new.bookid;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`UpdateAvg_AFTER_UPDATE` AFTER UPDATE ON `BookRating` FOR EACH ROW
BEGIN
				update book
				set avgrating = ifnull((
				select avg(rating) from
				bookrating br
				where br.bookid = new.bookid
				group by br.bookid),0)
				where bookid = new.bookid;
END$$

USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`UpdateAvg_AFTER_DELETE` AFTER DELETE ON `BookRating` FOR EACH ROW
BEGIN
				update book
				set avgrating = ifnull((
				select avg(rating) from
				bookrating br
				where br.bookid = old.bookid
				group by br.bookid),0)
				where bookid = old.bookid;
END$$


alter table PaymentMethod drop foreign key fk_PaymentMethod_Address1;
drop index fk_PaymentMethod_Address1_idx on PaymentMethod;
alter table paymentmethod drop column billingaddressid;

alter table paymentmethod drop column cardnumber;
alter table paymentmethod add column cardnumber varchar(50);

DELIMITER $$
USE `GeekText`$$
CREATE DEFINER = CURRENT_USER TRIGGER `GeekText`.`Userdetails_Cart_AFTER_INSERT` AFTER INSERT ON `Userdetails` FOR EACH ROW
BEGIN
	insert into SalesOrder (username, OrderTotal)
    values (NEW.username, 0);
END$$
